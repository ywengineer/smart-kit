// Code generated by hertz generator.

package passport

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/redis/go-redis/v9"
	"github.com/ywengineer/smart-kit/passport/biz/model/passport"
	"github.com/ywengineer/smart-kit/passport/pkg"
	"github.com/ywengineer/smart-kit/passport/pkg/model"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"time"
)

// Login .
// @router /login [GET]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req passport.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//
	sCtx := ctx.Value(pkg.ContextKeySmart).(pkg.SmartContext)
	bindKey := model.GetBindCacheKey(req.GetType().String(), req.GetId())
	// query bind cache
	bkv := sCtx.Redis().HGetAll(ctx, bindKey)
	_, err = bkv.Result()
	var bind model.PassportBinding
	//
	if errors.Is(err, redis.Nil) { // query bind db
		r := sCtx.Rdb().
			WithContext(ctx).
			Where(&model.PassportBinding{BindType: req.GetType().String(), BindId: req.GetId()}).
			First(&bind)
		if errors.Is(r.Error, gorm.ErrRecordNotFound) { // no data
			// cache null value for one minute
			bind.CreatedAt = time.Now()
		}
		// cache error
		if err = sCtx.Redis().HSet(ctx, bindKey, bind).Err(); err != nil {
			hlog.Error("[login] cache rdb object failed", zap.Error(err))
			c.JSON(consts.StatusOK, pkg.ApiError("cw"))
			return // stop
		}
	} else if err != nil {
		hlog.Error("[login] unreachable cache", zap.Error(err))
		c.JSON(consts.StatusOK, pkg.ApiError("unreachable c"))
		return // stop
	} else if err = bkv.Scan(&bind); err != nil { // cache error
		hlog.Error("[login] broken cache schema", zap.Error(err))
		c.JSON(consts.StatusOK, pkg.ApiError("broken schema"))
		return // stop
	}
	//-------------------------------------- cache null
	if bind.ID <= 0 && time.Until(bind.CreatedAt) <= time.Minute {
		c.JSON(consts.StatusOK, pkg.ApiError("nice try!!!asshole"))
		return // stop
	}
	//-------------------------------------- token match --------------------------------------
	if bind.AccessToken != req.GetAccessToken() {
		c.JSON(consts.StatusOK, pkg.ApiError("invalid.token"))
	} else if tk, _, err := sCtx.Jwt().TokenGenerator(map[string]interface{}{ // jwt token
		"id": bind.PassportId,
	}); err != nil {
		c.JSON(consts.StatusOK, pkg.ApiError(err.Error()))
	} else {
		c.JSON(consts.StatusOK, pkg.ApiOk(passport.LoginResp{
			PassportId: int64(bind.PassportId),
			Token:      tk,
			BrandNew:   false,
			CreateTime: time.Now().Unix(),
		}))
	}
}
