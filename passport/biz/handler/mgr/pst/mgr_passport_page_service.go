// Code generated by hertz generator.

package pst

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/ywengineer/smart-kit/passport/internal"
	"github.com/ywengineer/smart-kit/passport/internal/converter"
	model2 "github.com/ywengineer/smart-kit/passport/internal/model"
	"github.com/ywengineer/smart-kit/passport/pkg"
	"github.com/ywengineer/smart-kit/passport/pkg/sql"
	"go.uber.org/zap"
	"gorm.io/gorm"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	pst "github.com/ywengineer/smart-kit/passport/biz/model/mgr/pst"
)

// Page .
// @router /mgr/passport/page [GET]
func Page(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pst.MgrPassportPageReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, internal.ValidateErr(err))
		return
	}
	//
	sCtx := ctx.Value(pkg.ContextKeySmart).(pkg.SmartContext)
	//
	if req.PassportId > 0 {
		var pstModel model2.Passport
		//
		if stmt := sCtx.Rdb().WithContext(ctx).
			Unscoped().
			First(&pstModel, req.GetPassportId()); stmt.Error != nil && !errors.Is(stmt.Error, gorm.ErrRecordNotFound) {
			hlog.Error("passport page rdb error", zap.Any("data", req), zap.String("err", stmt.Error.Error()), zap.String("tag", "passport_page_service"))
			c.JSON(consts.StatusOK, internal.ErrRdb)
		} else {
			c.JSON(consts.StatusOK, pkg.ApiOk(&pst.MgrPassportPageRes{
				Page:     1,
				PageSize: req.GetPageSize(),
				Total:    1,
				MaxPage:  1,
				Data:     []*pst.PassportData{converter.ConvertPassport(&pstModel, nil)},
			}))
		}
	} else {
		var users []model2.Passport
		// extend query before paginating
		stmt := sCtx.Rdb().WithContext(ctx).Model(&users).Order("id desc")
		// with pagination
		if p, err := sql.Paginate[model2.Passport](ctx, stmt, req.GetPageNo(), req.GetPageSize(), &users, func(i model2.Passport) *pst.PassportData {
			return converter.ConvertPassport(&i, nil)
		}); err != nil {
			hlog.Error("paginator error", zap.Any("data", req), zap.String("err", err.Error()), zap.String("tag", "passport_page_service"))
			c.JSON(consts.StatusOK, internal.ErrRdb)
		} else {
			c.JSON(consts.StatusOK, pkg.ApiOk(&pst.MgrPassportPageRes{
				Page:     req.GetPageNo(),
				PageSize: req.GetPageSize(),
				Total:    p.Total,
				MaxPage:  p.MaxPage,
				Data:     p.Data,
			}))
		}
	}
}
